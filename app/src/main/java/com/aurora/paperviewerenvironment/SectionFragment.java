package com.aurora.paperviewerenvironment;

import android.graphics.Color;
import android.graphics.Rect;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.support.v4.view.ViewPager;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.webkit.WebView;
import android.widget.ImageButton;
import android.widget.TextView;

import com.aurora.paperviewerprocessor.paper.Paper;
import com.aurora.paperviewerprocessor.paper.Section;

/**
 * A fragment containing the view for a section of the paper
 */
public class SectionFragment extends Fragment implements View.OnClickListener {
    /*
     * The fragment argument representing the section number for this
     * fragment.
     */
    private static final String ARG_SECTION_INDEX = "section_number";
    private static final int PREV_OFFSET = 1;
    private static final int NEXT_OFFSET = 1;
    private static final int ABSTRACT_SIZE = 1;

    private Paper mPaper;

    private View mSectionView;
    // Text area's for displaying the content from the section
    private TextView mSectionHeader;
    private WebView mSectionWebView;

    // Button's for navigating to other sections and the abstract
    private ImageButton mBtnTopNavLeft;
    private ImageButton mBtnTopNavRight;
    private ImageButton mBtnBottomNavLeft;
    private ImageButton mBtnBottomNavRight;

    public SectionFragment() {
        // Empty constructor (generated by Android Studio)
    }

    /**
     * Returns a new instance of this fragment for the given section
     * number.
     */
    public static SectionFragment newInstance(int sectionIndex) {
        SectionFragment fragment = new SectionFragment();
        Bundle args = new Bundle();
        args.putInt(ARG_SECTION_INDEX, sectionIndex);
        fragment.setArguments(args);
        return fragment;
    }

    public void setPaper(Paper paper){
        this.mPaper = paper;
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        int sectionIndex = getArguments().getInt(ARG_SECTION_INDEX);
        Section section = mPaper.getSections().get(sectionIndex);

        // Inflate the scrollable view for a section
        mSectionView = inflater.inflate(R.layout.fragment_section, container, false);

        mSectionHeader = mSectionView.findViewById(R.id.section_header);
        mSectionHeader.setText(section.getHeader());

        // Initialize navigation buttons
        mBtnTopNavLeft = mSectionView.findViewById(R.id.btn_section_top_nav_left);
        mBtnBottomNavLeft = mSectionView.findViewById(R.id.btn_section_bottom_nav_left);
        mBtnTopNavRight = mSectionView.findViewById(R.id.btn_section_top_nav_right);
        mBtnBottomNavRight = mSectionView.findViewById(R.id.btn_section_bottom_nav_right);
        mBtnTopNavLeft.setOnClickListener(this);
        mBtnBottomNavLeft.setOnClickListener(this);
        mBtnTopNavRight.setOnClickListener(this);
        mBtnBottomNavRight.setOnClickListener(this);
        if(canNavigateLeft(sectionIndex)){
            mBtnTopNavLeft.setVisibility(View.VISIBLE);
            mBtnBottomNavLeft.setVisibility(View.VISIBLE);
        } else{
            mBtnTopNavLeft.setVisibility(View.INVISIBLE);
            mBtnBottomNavLeft.setVisibility(View.INVISIBLE);
        }
        if(canNavigateRight(sectionIndex)){
            mBtnTopNavRight.setVisibility(View.VISIBLE);
            mBtnBottomNavRight.setVisibility(View.VISIBLE);
        } else{
            mBtnTopNavRight.setVisibility(View.INVISIBLE);
            mBtnBottomNavRight.setVisibility(View.INVISIBLE);
        }

        mSectionWebView = mSectionView.findViewById(R.id.section_webview);
        mSectionWebView.setFocusable(false);
        mSectionWebView.setBackgroundColor(Color.TRANSPARENT);

        // Remove bottom navigation button in case the button is visible at start position
        mSectionView.post(() -> {
            if(isVisibleInRootView(mSectionView, mBtnBottomNavRight)){
                mBtnBottomNavRight.setVisibility(View.INVISIBLE);
            }
            if(isVisibleInRootView(mSectionView, mBtnBottomNavLeft)){
                mBtnBottomNavLeft.setVisibility(View.INVISIBLE);
            }
        });

        // Set the text properties of the section content
        String htmlFront = "<html><head>" +
                "<style type=\"text/css\">body {" +
                "font-family: " + getResources().getString(R.string.section_font_family) + ";" +
                "font-size: " + getResources().getDimension(R.dimen.section_font_size) + ";" +
                "font-weight: " + getResources().getString(R.string.section_font_weight) + ";" +
                "text-align: " + getResources().getString(R.string.section_text_align) + ";" +
                "}</style></head><body>";
        String htmlEnd = "</body></html>";
        String myHtmlString = htmlFront + section.getContent() + htmlEnd;

        // Add content to the webview
        mSectionWebView.loadDataWithBaseURL(null, myHtmlString, "text/html", "UTF-8", null);

        return mSectionView;
    }

    @Override
    public void onClick(View view) {
        int sectionIndex = getArguments().getInt(ARG_SECTION_INDEX);
        ViewPager sectionViewPager = ((MainActivity) getActivity()).getSectionViewPager();

        switch(view.getId()){
            case R.id.btn_section_top_nav_left:
            case R.id.btn_section_bottom_nav_left:
                if(canNavigateLeft(sectionIndex)) {
                    sectionViewPager.setCurrentItem(prevSectionPosition(sectionIndex));
                }
                break;
            case R.id.btn_section_top_nav_right:
            case R.id.btn_section_bottom_nav_right:
                if(canNavigateRight(sectionIndex)) {
                    sectionViewPager.setCurrentItem(nextSectionPosition(sectionIndex));
                }
                break;
            default:
                break;
        }
    }

    private boolean canNavigateLeft(int currSectionIndex){
        return (currSectionIndex > 0 || (currSectionIndex == 0 && mPaper.getAbstract() != null));
    }

    private boolean canNavigateRight(int currSectionIndex){
        return currSectionIndex < (mPaper.getSections().size()-1);
    }

    /*
     * Returns the position of the next section in the section viewport
     * */
    private int nextSectionPosition(int currSectionIndex){
        if(mPaper.getAbstract() != null){
            // add 1 extra for the abstract taking position 0 in the viewport
            return currSectionIndex + ABSTRACT_SIZE + NEXT_OFFSET;
        } else{
            return currSectionIndex + NEXT_OFFSET;
        }
    }

    /*
     * Returns the position of the prev section in the section viewport
     * */
    private int prevSectionPosition(int currSectionIndex){
        if(mPaper.getAbstract() != null){
            // add 1 for the abstract taking position 0 in the viewport
            return currSectionIndex + ABSTRACT_SIZE - PREV_OFFSET;
        } else{
            return currSectionIndex - PREV_OFFSET;
        }
    }

    /**
     *   Checks whether the given view is visible in the scroll view
     */
    private boolean isVisibleInRootView(View rootView, View view){
        Rect scrollBounds = new Rect();
        rootView.getHitRect(scrollBounds);
        return view.getLocalVisibleRect(scrollBounds);
    }


}

